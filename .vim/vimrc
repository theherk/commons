if has('vim_starting')
  set nocompatible
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" Bundles
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'godlygeek/tabular'
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-dispatch'
NeoBundle 'fatih/vim-go'
NeoBundle 'morhetz/gruvbox'
NeoBundle 'stephpy/vim-yaml'
NeoBundle 'dracula/vim'
NeoBundle 'xolox/vim-misc' " required for other xolox plugins
NeoBundle 'xolox/vim-colorscheme-switcher'
NeoBundle 'edkolev/tmuxline.vim'

call neobundle#end()

NeoBundleCheck

filetype plugin indent on

let mapleader=" "
scriptencoding utf-8
set encoding=utf-8
set modelines=0
set autoindent
set showmode
set showcmd
set visualbell
set ruler
set cursorline
set number
set laststatus=2
set history=1000
set undofile
set undoreload=10000
set splitbelow
set splitright
set title
set colorcolumn=72
set wildmode=longest,list,full
set wildmenu "shows options in complete menu
set backspace=indent,eol,start " allow normal backspace
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set textwidth=0
set wrap
set list
set listchars=trail:·,tab:▸\·
set showbreak=~

" Lightline configuration
let g:lightline = {
    \ 'colorscheme': 'dracula',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ],
    \   'right': [ [ 'syntastic', 'lineinfo' ],
    \              [ 'percent' ],
    \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
    \ },
    \ 'component_function': {
    \   'fugitive': 'LightlineFugitive',
    \   'readonly': 'LightlineReadonly',
    \   'modified': 'LightlineModified',
    \   'filename': 'LightlineFilename',
    \ },
    \ }

function! LightlineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightlineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return ""
  else
    return ""
  endif
endfunction

function! LightlineFugitive()
  if exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? ' '._ : ''
  endif
  return ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
       \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
       \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

" Colors
syntax on

if !has('gui_running')
    set t_Co=256
endif

if &term =~ '256color'
    " Disable Background Color Erase (BCE) so that color schemes
    " work properly when Vim is used inside tmux and GNU screen.
    set t_ut=
endif

set background=dark
colorscheme dracula

" Copy/Paste
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P

" Better Completion
" -----------------
set complete=.,w,b,u,t
set completeopt=longest,menuone,preview

" Search Preferences
" ------------------

set hlsearch "highlight search term
set ignorecase "case insensitive search
set smartcase "case insensitive unless there are capital letters
set incsearch "search as the term is typed

" Resize splits when the window is resized
" Tabular cause this to issue an error
" Error detected while processing VimResized Auto commands for \"*\":
" Not allowed here: :wincmd =
" au VimResized * :wincmd =

" Line Return
" -----------

" Make sure Vim returns to the same line when you reopen a file.
" Thanks, Amit
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" Saving and quiting
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>

