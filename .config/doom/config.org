#+TITLE: emacs literate configuration
#+AUTHOR: Adam Lawrence Sherwood
#+EMAIL: theherk@gmail.com
#+STARTUP: overview

* theherk's literate doom configuration

User identification. You can find more information in the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/User-Identification.html][official documentation]].

#+begin_src elisp
(setq user-full-name "Adam Sherwood"
      user-mail-address "theherk@gmail.com")
#+end_src

** Display configuration

*** Font

#+begin_src elisp
(setq
  doom-font (font-spec :family "VictorMono Nerd Font" :size 20)
  doom-big-font (font-spec :family "VictorMono Nerd Font" :size 24)
  doom-variable-pitch-font (font-spec :family "VictorMono Nerd Font" :size 20))

#+end_src

*** Theme

Load slightly customized version of tokyo night. This has green replaces with purple in places.

#+begin_src elisp
(setq doom-theme 'h4s-tokyo-night)
#+end_src

Who doesn't want Bruce Lee to greet them at the beginning of a work session. He's there to remind you:

#+begin_quote
Do not pray for an easy life, pray for the strength to endure a difficult one.
#+end_quote

#+begin_src elisp
(setq fancy-splash-image "~/commons/img/bruce-matlocktheartist_200w.png")
#+end_src

Remove the title bar from 29 forward.

#+begin_src elisp
(add-to-list 'default-frame-alist '(undecorated-round . t))
#+end_src

**** Alpha

#+begin_src elisp
(doom/set-frame-opacity 88)
#+end_src

*** Lines

The line I am on is always in the modeline, so generally I don't need to see these. And if I do, it is always just a ~SPC t l~ away.

#+begin_src elisp
(setq display-line-numbers-type nil)
#+end_src

Toggle line wrapping.

#+begin_src elisp
(map! :leader
  :desc "toggle wrap"
  "t t" #'toggle-truncate-lines)
#+end_src

*** treemacs

#+begin_src elisp
(with-eval-after-load 'doom-themes
  (setq doom-themes-treemacs-theme "doom-colors")
  (doom-themes-treemacs-config))
#+end_src

*** Menu Bar

The menu bar for emacs is awesome if you use it. I don't and it takes up real estate for doll icons.

#+begin_src elisp
(menu-bar-mode -1)
#+end_src

** groovy-mode

Load all files called =*jenkinsfile*= in groovy-mode.

#+begin_src elisp
(add-to-list 'auto-mode-alist '("[Jj]enkinsfile" . groovy-mode))
#+end_src

** magit

#+begin_src elisp
(after! magit
  (setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     ")))
#+end_src

*** Get pytest from executable

This is suggested [[https://github.com/hlissner/doom-emacs/issues/2424#issuecomment-723091495][here]], but doesn't seem to work.

#+begin_src elisp
(add-hook! python-mode
  (advice-add 'python-pytest-file :before
              (lambda (&rest args)
                (setq python-pytest-executable (+python-executable-find "pytest")))))
#+end_src

** org-mode

#+begin_src elisp
(setq org-directory "~/org/")
#+end_src

When the point is over a link in org-mode ~SPC m l y~ will yank that link.

#+begin_src elisp
(defun theherk/org-link-yank (&optional arg)
  "Extract URL from org-mode link and add it to kill ring."
  (interactive "P")
  (let* ((link (org-element-lineage (org-element-context) '(link) t))
          (type (org-element-property :type link))
          (url (org-element-property :path link))
          (url (concat type ":" url)))
    (kill-new url)
    (message (concat "Copied URL: " url))))
(map! :leader
  :desc "yank org link"
  "m l y" #'theherk/org-link-yank)
#+end_src

While org's agenda todo list is usually sufficient, this let's you collapse a current org-mode file to expose only the TODO's within.

#+begin_src elisp
(map! :leader
  :desc "org show todo tree"
  "t o t" #'org-show-todo-tree)
#+end_src

Make org pretty with [[https://github.com/minad/org-modern][org-modern]].

#+begin_src elisp
(add-hook 'org-mode-hook #'org-modern-mode)
#+end_src

Load animations by default.

#+begin_src elisp
(add-hook 'org-mode-hook #'org-inline-anim-mode)
#+end_src

#+begin_src elisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

#+begin_src elisp
(map! :leader
  :desc "org roam ui"
  "n r u")
(map! :leader
  :desc "org roam ui open"
  "n r u o" #'org-roam-ui-open)
#+end_src

Load ox exporters (gfm, jira, and pandoc) as soon as org is loaded. No clue why running all these in one =progn= within the =eval-after-load=, but here we are.

#+begin_src elisp
(eval-after-load "org"
  '(require 'ox-gfm nil t))
(eval-after-load "org"
  '(require 'ox-jira nil t))
(eval-after-load "org"
  '(require 'ox-pandoc nil t))
#+end_src

** projectile

#+begin_src elisp
(setq projectile-project-search-path
      '(("~/projects/bitbucket.org/" . 3)
        ("~/projects/github.com/" . 3)
        ("~/projects/gitlab.com" . 3)
        ("~/projects/gitlab.tech.dnb.no/" . 4)
        ("~/projects/sr.ht/" . 3))
      projectile-sort-order 'recentf)
#+end_src

** vertico

Enable mouse scrolling.

#+begin_src elisp
(vertico-mouse-mode)
#+end_src

** global shortcuts

Switch window with letters when there are more than two.

#+begin_src elisp
(map! :leader
  :desc "switch window"
  "w w" #'switch-window)
#+end_src

Swap workspaces.

#+begin_src elisp
(map! :leader
  :desc "swap workspace left"
  "TAB {" #'+workspace/swap-left)
(map! :leader
  :desc "swap workspace right"
  "TAB }" #'+workspace/swap-right)
#+end_src

After collapsing all with =z m=, I want to use tab to toggle the fold.

#+begin_src elisp
(map!
 :nv [tab] #'+fold/toggle)
#+end_src

Expand region by semantic units.

#+begin_src elisp
(map! "M-o" #'er/expand-region)
#+end_src

*** Make

#+begin_src elisp
(map! :leader
  :desc "make targets"
  "c m" #'makefile-executor-execute-target)
#+end_src

*** LSP

lsp-ui-imenu is a less helpful alternative.

#+begin_src elisp
(map! :leader
  :desc "lsp ui doc glance"
  "c g" #'lsp-ui-doc-glance)
(map! :leader
  :desc "symbol explorer"
  "o l" #'lsp-treemacs-symbols)
#+end_src
