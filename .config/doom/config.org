#+TITLE: emacs literate configuration
#+AUTHOR: Adam Lawrence Sherwood
#+EMAIL: theherk@gmail.com
#+STARTUP: overview

* theherk's literate doom configuration

According to [[https://nullprogram.com/blog/2016/12/22/][this blog]], this lexical-binding can improve performance.

#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

User identification. You can find more information in the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/User-Identification.html][official documentation]].

#+begin_src elisp
(setq user-full-name "Adam Sherwood"
      user-mail-address "theherk@gmail.com")
#+end_src

** Display configuration

*** Font

I am still undecided on usage of variable pitch font. I cannot recall what issue it was causing for me, but it had to do with ligatures. It is probably fine.

#+begin_src elisp
(setq
  doom-font (font-spec :family "VictorMono Nerd Font" :size 20)
  doom-big-font (font-spec :family "VictorMono Nerd Font" :size 24)
  doom-variable-pitch-font (font-spec :family "VictorMono Nerd Font" :size 20))

#+end_src

*** Modeline:

#+begin_src elisp
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :custom
  (doom-modeline-bar-width 6)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-buffer-modification-icon t)
  (doom-modeline-height 1)
  (doom-modeline-persp-name t)
  (doom-modeline-workspace-name t))
#+end_src

*** Theme
Now that Prot has release [[https://github.com/protesilaos/ef-themes][ef-themes]], I see no reason to use any others.

#+begin_src elisp
(require 'ef-themes)
(mapc #'disable-theme custom-enabled-themes)
(load-theme 'ef-winter :no-confirm)
#+end_src

Who doesn't want Bruce Lee to greet them at the beginning of a work session. He's there to remind you:

#+begin_quote
Do not pray for an easy life, pray for the strength to endure a difficult one.
#+end_quote

#+begin_src elisp
(setq fancy-splash-image "~/commons/img/bruce-matlocktheartist_200w.png")
#+end_src

**** Alpha

This can set the windows alpha, and I may want that sometime, but generally I use emacs edge-to-edge and on macOS, one cannot use transparency in full screen.

#+begin_src elisp
;; alpha
;; (set-frame-parameter (selected-frame) 'alpha '(90 65))
;; (add-to-list 'default-frame-alist '(alpha 90 65))
#+end_src

*** Lines

The line I am on is always in the modeline, so generally I don't need to see these. And if I do, it is always just a ~SPC t l~ away.

#+begin_src elisp
(setq display-line-numbers-type nil)
#+end_src

Toggle line wrapping.

#+begin_src elisp
(map! :leader
  :desc "toggle wrap"
  "t t" #'toggle-truncate-lines)
#+end_src

*** treemacs

#+begin_src elisp
(with-eval-after-load 'doom-themes
  (setq doom-themes-treemacs-theme "doom-colors")
  (doom-themes-treemacs-config))
#+end_src

** everywhere

#+begin_src elisp
(setq emacs-everywhere-frame-parameters '((name . "emacs-everywhere") (height . 18) (width . 80)))
#+end_src

** groovy-mode

Load all files called =*jenkinsfile*= in groovy-mode.

#+begin_src elisp
(add-to-list 'auto-mode-alist '("[Jj]enkinsfile" . groovy-mode))
#+end_src

** magit

#+begin_src elisp
(after! magit
  (setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     ")))
#+end_src

** python-mode

Use direnv for best venv, virtualenv, pyenv handling. Add =layout pyenv <version>= to .envrc. This will automatically create a virtual environment with the given python executable.

Remember to run =lsp-workspace-restart=.

*** Get pytest from executable

This is suggested [[https://github.com/hlissner/doom-emacs/issues/2424#issuecomment-723091495][here]], but doesn't seem to work.

#+begin_src elisp
(add-hook! python-mode
  (advice-add 'python-pytest-file :before
              (lambda (&rest args)
                (setq python-pytest-executable (+python-executable-find "pytest")))))
#+end_src

** org-mode

#+begin_src elisp
(setq org-directory "~/org/")
#+end_src

When the point is over a link in org-mode ~SPC m l y~ will yank that link.

#+begin_src elisp
(defun theherk/org-link-yank (&optional arg)
  "Extract URL from org-mode link and add it to kill ring."
  (interactive "P")
  (let* ((link (org-element-lineage (org-element-context) '(link) t))
          (type (org-element-property :type link))
          (url (org-element-property :path link))
          (url (concat type ":" url)))
    (kill-new url)
    (message (concat "Copied URL: " url))))
(map! :leader
  :desc "yank org link"
  "m l y" #'theherk/org-link-yank)
#+end_src

While org's agenda todo list is usually sufficient, this let's you collapse a current org-mode file to expose only the TODO's within.

#+begin_src elisp
(map! :leader
  :desc "org show todo tree"
  "t o t" #'org-show-todo-tree)
#+end_src

Make org pretty with [[https://github.com/minad/org-modern][org-modern]].

#+begin_src elisp
(add-hook 'org-mode-hook #'org-modern-mode)
#+end_src

org-roam and org-roam-ui settings

#+begin_src elisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

#+begin_src elisp
(map! :leader
  :desc "org roam ui"
  "n r u")
(map! :leader
  :desc "org roam ui open"
  "n r u o" #'org-roam-ui-open)
#+end_src

Load ox exporters (gfm, jira, and pandoc) as soon as org is loaded. No clue why running all these in one =progn= within the =eval-after-load=, but here we are.

#+begin_src elisp
(eval-after-load "org"
  '(require 'ox-gfm nil t))
(eval-after-load "org"
  '(require 'ox-jira nil t))
(eval-after-load "org"
  '(require 'ox-pandoc nil t))
#+end_src

** projectile

#+begin_src elisp
(setq projectile-project-search-path
      '(("~/projects/bitbucket.org/" . 3)
        ("~/projects/dnb.no/" . 3)
        ("~/projects/github.com/" . 3)
        ("~/projects/gitlab.com" . 3)
        ("~/projects/sr.ht/" . 3))
      projectile-sort-order 'recentf)
#+end_src

** global shortcuts

*** Make

#+begin_src elisp
(map! :leader
  :desc "make targets"
  "c m" #'makefile-executor-execute-target)
#+end_src

*** LSP

lsp-ui-imenu is a less helpful alternative.

#+begin_src elisp
(map! :leader
  :desc "lsp ui doc glance"
  "c g" #'lsp-ui-doc-glance)
(map! :leader
  :desc "symbol explorer"
  "o l" #'lsp-treemacs-symbols)
#+end_src

** miscellaneous

I still have some issues with line handling and reaching the end of non-truncated lines sometimes. This is a workaround I had at some point. I'm keeping it around for posterity.

#+begin_src elisp
;; https://github.com/hlissner/doom-emacs/issues/401
;; (setq evil-respect-visual-line-mode t)
#+end_src

For some reason, without this disabled, sh wants to autocomplete everything and search every path, so it is really slow.

#+begin_src elisp
(after! sh-script
  (set-company-backend! 'sh-mode nil))
#+end_src

To avoid the error =command not found: pdflatex=, we need to manipulate the path in macos.

#+begin_src elisp
(exec-path-from-shell-initialize)
#+end_src
