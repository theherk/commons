#+TITLE: Editing Notes
#+AUTHOR: Adam Sherwood
#+EMAIL: theherk@gmail.com
#+DESCRIPTION: Reminders to myself about editing.

* Helix

+ change case with =~=
+ use =A-;= to reverse selection

* Emacs

+ Set individual file coding with: ~-*- coding: utf-8 -*-~.
+ Reset a buffer with coding: =revert-buffer-with-coding-system=.
+ selective-display =C-3 C-x $=
+ =C-z= to switch emacs/vim modes
+ select task status: =SPC m t=
+ edit link - =C-c C-l=
+ permanent search results - =C-c C-o=
+ last search - =spc '=
+ insert src - ~<s <tab>~
+ save without autocomplete - type filename then =C-j=
+ use =--= to add ripgrep args to searches

** align

Align things like trailing comments with =align-regexp=.

before:
#+begin_src yaml
- thing # This is a short thing.
- aLongerThing # This is a long thing.
#+end_src

after =M-x align-regexp # RET:
#+begin_src yaml
- thing        # This is a short thing.
- aLongerThing # This is a long thing.
#+end_src

** jumping

- Go to definition: =g d=

Using better jumper.

- Show jump list: =SPC s j=
- jump in: =C-i=
- jump out: =C-o=

** multi-edit
1. initiate a search with =SPC /= =Z Z=
2. enter in edit mode with =C-c C-e=
3. go to the occurrence and enter in iedit state with =SPC s e=
4. edit the occurrences then leave the iedit state
5. press =C-c C-c=

** tramp

Open files with local root the easy way: ~SPC f f~ then =/sudo::/=.

** org-mode

Set startup options with directive =STARTUP=. [[https://orgmode.org/manual/In_002dbuffer-Settings.html][Buffer Settings]]

#+begin_src org
#+STARTUP: overview
#+end_src

Each tree can have its visibility set individually using the =VISIBILITY= property.[[https://orgmode.org/manual/Initial-visibility.html][ Initial Visibility]]

#+begin_src org
:PROPERTIES:
:VISIBILITY: children
:END:
#+end_src

Open the agenda with =SPC o A=. You can show all tasks from there, but you can also expose only tasks in the current org file using =SPC t o t=.

Archive todo entries with =SPC m A=. You can move archive entries the archive file back back out using =org-refile= or =SPC m s r=

** dired

+ toggle details: ~dired-hide-details-mode~, =(=
+ toggle git details: ~dired-git-info-mode~, =)=

** python-mode

Use direnv for best venv, virtualenv, pyenv handling. Add the following:

#+begin_src rc
source_up
export AWS_PROFILE=maybe
layout pyenv 3.8.10
#+end_src

This will automatically create a virtual environment with the given python executable.

Remember to run =lsp-workspace-restart=.

** Just handy commands

+ window-enlargen: =SPC w o=, amazing and works in popups
+ balance-windows: =SPC w ==, set things back to even

* Make help

#+begin_src makefile
help: ## show help message
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m\033[0m\n"} /^[$$()% a-zA-Z./_-]+:.*?##/ { printf "  \033[36m%-16s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)
#+end_src


* AWS envrc

These commands are examples of how to run through directories and create .envrc files.

First export this template:

#+begin_src shell
export TMPL='source_up\nexport AWS_PROFILE=${P}'
#+end_src

Then go to the root of there repositories to run the following commands.

#+begin_src shell
P=default-for-start envsubst < <(echo $TMPL) > .envrc
for d in $(find . -type d -name "dev*"); do P=$(basename $d) envsubst < <(echo $TMPL) > ${d}/.envrc; done
for d in $(find . -type d \( -name "sit*" -o -name "uat*" \)); do P=$(basename ${d/(sit|uat)/int}) envsubst < <(echo $TMPL) > ${d}/.envrc; done
for d in $(find . -type d -name "prod*"); do P=$(basename $d)-ro envsubst < <(echo $TMPL) > ${d}/.envrc; done
for f in $(find . -type f -name ".envrc"); do direnv allow $(dirname $f); done
#+end_src

* vim sudo cheat

#+begin_src vim
cmap w!! w !sudo tee > /dev/null %
#+end_src
